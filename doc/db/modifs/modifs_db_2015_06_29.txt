ALTER TABLE pnc.base_site ADD COLUMN ref_commune VARCHAR;
ALTER TABLE pnc.base_observation ADD COLUMN ref_commune VARCHAR;

CREATE OR REPLACE FUNCTION pnc.fct_trg_commune_from_geom() RETURNS TRIGGER AS $comgeom$
BEGIN
    if(NEW.geom is not NULL) THEN
        NEW.ref_commune = (SELECT a.nom_reel FROM ref_geographique.communes_france a WHERE st_intersects(st_transform(NEW.geom, 2154), a.geom) ORDER BY a.insee_com LIMIT 1);
    END IF;
RETURN NEW;
END;
$comgeom$ language plpgsql;

CREATE TRIGGER trg_commune_from_geom BEFORE INSERT OR UPDATE ON pnc.base_site 
FOR EACH ROW EXECUTE PROCEDURE pnc.fct_trg_commune_from_geom();

CREATE TRIGGER trg_commune_from_geom BEFORE INSERT OR UPDATE ON pnc.base_observation 
FOR EACH ROW EXECUTE PROCEDURE pnc.fct_trg_commune_from_geom();



DROP VIEW chiro.vue_chiro_obs_all;
DROP VIEW chiro.vue_chiro_obs;
DROP VIEW chiro.vue_chiro_obs_ss_site;


CREATE OR REPLACE VIEW chiro.vue_chiro_obs AS 
    SELECT obs.id,
        obs.site_id,
        sit.site_nom,
        obs.obs_date,
        obs.obs_commentaire,
        obs.obs_id_table_src,
        obs.created,
        obs.updated,
        obs.numerisateur_id,
        (upper(num.nom_role::text) || ' '::text) || num.prenom_role::text AS numerisateur,
        cco.obs_temperature,
        cco.obs_humidite,
        cco.mod_id,
        ( SELECT count(*) AS count
            FROM chiro.chiro_observation_taxon a
            WHERE a.obs_id = obs.id) AS nb_taxons,
        ( SELECT sum(a.obs_effectif_abs) AS count
            FROM chiro.chiro_observation_taxon a
            WHERE a.obs_id = obs.id) AS abondance
    FROM pnc.base_observation obs
    JOIN chiro.chiro_conditions_observ cco ON cco.obs_id = obs.id
    JOIN pnc.base_site sit ON sit.id = obs.site_id
    LEFT JOIN utilisateurs.t_roles num ON num.id_role = obs.numerisateur_id
    ORDER BY obs.obs_date DESC;


CREATE OR REPLACE VIEW chiro.vue_chiro_obs_ss_site AS 
    SELECT obs.id,
        st_asgeojson(obs.geom) AS geom,
        obs.obs_date,
        obs.obs_commentaire,
        obs.obs_id_table_src,
        obs.numerisateur_id,
        obs.created,
        obs.updated,
        (upper(num.nom_role::text) || ' '::text) || num.prenom_role::text AS numerisateur,
        cco.obs_temperature,
        cco.obs_humidite,
        cco.mod_id,
        ( SELECT count(*) AS count
            FROM chiro.chiro_observation_taxon a
            WHERE a.obs_id = obs.id) AS nb_taxons,
        ( SELECT sum(a.obs_effectif_abs) AS count
            FROM chiro.chiro_observation_taxon a
            WHERE a.obs_id = obs.id) AS abondance
    FROM pnc.base_observation obs
    JOIN chiro.chiro_conditions_observ cco ON cco.obs_id = obs.id
    LEFT JOIN utilisateurs.t_roles num ON num.id_role = obs.numerisateur_id
    WHERE obs.site_id IS NULL AND NOT obs.geom IS NULL
    ORDER BY obs.obs_date DESC;


