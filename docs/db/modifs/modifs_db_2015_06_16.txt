DROP VIEW chiro.vue_utilisateurs_acteurs;
DROP VIEW chiro.vue_chiro_obs;
DROP VIEW chiro.vue_chiro_obs_ss_site;


ALTER TABLE chiro.chiro_conditions_observ ADD COLUMN mod_id integer;

UPDATE chiro.chiro_conditions_observ SET mod_id=18;

ALTER TABLE chiro.chiro_observation_taxon DROP COLUMN mod_id;

CREATE OR REPLACE VIEW chiro.vue_chiro_obs AS 
SELECT obs.id,
obs.site_id,
sit.site_nom,
obs.obs_date,
obs.obs_commentaire,
obs.obs_id_table_src,
obs.numerisateur_id,
(upper(num.nom_role::text) || ' '::text) || num.prenom_role::text AS numerisateur,
cco.obs_temperature,
cco.obs_humidite,
cco.mod_id,
( SELECT count(*) AS count
FROM chiro.chiro_observation_taxon a
WHERE a.obs_id = obs.id) AS nb_taxons,
( SELECT sum(a.obs_effectif_abs) AS count
FROM chiro.chiro_observation_taxon a
WHERE a.obs_id = obs.id) AS abondance
FROM pnc.base_observation obs
JOIN chiro.chiro_conditions_observ cco ON cco.obs_id = obs.id
JOIN pnc.base_site sit ON sit.id = obs.site_id
LEFT JOIN utilisateurs.t_roles num ON num.id_role = obs.numerisateur_id
ORDER BY obs.obs_date DESC;




CREATE OR REPLACE VIEW chiro.vue_chiro_obs_ss_site AS 
SELECT obs.id,
st_asgeojson(obs.geom) AS geom,
obs.obs_date,
obs.obs_commentaire,
obs.obs_id_table_src,
obs.numerisateur_id,
(upper(num.nom_role::text) || ' '::text) || num.prenom_role::text AS numerisateur,
cco.obs_temperature,
cco.obs_humidite,
cco.mod_id,
( SELECT count(*) AS count
FROM chiro.chiro_observation_taxon a
WHERE a.obs_id = obs.id) AS nb_taxons,
( SELECT sum(a.obs_effectif_abs) AS count
FROM chiro.chiro_observation_taxon a
WHERE a.obs_id = obs.id) AS abondance
FROM pnc.base_observation obs
JOIN chiro.chiro_conditions_observ cco ON cco.obs_id = obs.id
LEFT JOIN utilisateurs.t_roles num ON num.id_role = obs.numerisateur_id
WHERE obs.site_id IS NULL AND NOT obs.geom IS NULL
ORDER BY obs.obs_date DESC;




CREATE OR REPLACE VIEW chiro.vue_utilisateurs_acteurs AS 
SELECT DISTINCT r.id_role AS obr_id,
r.nom_role AS obr_nom,
r.prenom_role AS obr_prenom,
(upper(r.nom_role::text) || ' '::text) || r.prenom_role::text AS nom_complet,
lower((r.nom_role::text || ' '::text) || r.prenom_role::text) AS nom_complet_lower,
'observateur'::text AS role
FROM utilisateurs.t_roles r
WHERE (r.id_role IN ( SELECT DISTINCT cr.id_role_utilisateur
FROM utilisateurs.cor_roles cr
WHERE (cr.id_role_groupe IN ( SELECT crm.id_role
FROM utilisateurs.cor_role_menu crm))
ORDER BY cr.id_role_utilisateur)) OR (r.id_role IN ( SELECT crm.id_role
FROM utilisateurs.cor_role_menu crm
JOIN utilisateurs.t_roles r_1 ON r_1.id_role = crm.id_role AND r_1.groupe = false))
UNION
SELECT DISTINCT r.id_role AS obr_id,
r.nom_role AS obr_nom,
r.prenom_role AS obr_prenom,
(upper(r.nom_role::text) || ' '::text) || r.prenom_role::text AS nom_complet,
lower((r.nom_role::text || ' '::text) || r.prenom_role::text) AS nom_complet_lower,
'validateur'::text AS role
FROM utilisateurs.t_roles r
WHERE (r.id_role IN ( SELECT DISTINCT cr.id_role_utilisateur
FROM utilisateurs.cor_roles cr
WHERE (cr.id_role_groupe IN ( SELECT crm.id_role
FROM utilisateurs.cor_role_menu crm))
ORDER BY cr.id_role_utilisateur)) OR (r.id_role IN ( SELECT crm.id_role
FROM utilisateurs.cor_role_menu crm
JOIN utilisateurs.t_roles r_1 ON r_1.id_role = crm.id_role AND r_1.groupe = false));

